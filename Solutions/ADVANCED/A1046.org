* 1046 Shortest Distance (20)（20 分）
The task is really simple: given N exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits.

** Input Specification:

Each input file contains one test case. For each case, the first line contains an integer N (in [3, 10^5^]), followed by N integer distances D~1~ D~2~ ... D~N~, where D~i~ is the distance between the i-th and the (i+1)-st exits, and D~N~ is between the N-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer M (<=10^4^), with M lines follow, each contains a pair of exit numbers, provided that the exits are numbered from 1 to N. It is guaranteed that the total round trip distance is no more than 10^7^.

** Output Specification:

For each test case, print your results in M lines, each contains the shortest distance between the corresponding given pair of exits.

** Sample Input:
#+BEGIN_SRC text
5 1 2 4 14 9
3
1 3
2 5
4 1
#+END_SRC
** Sample Output:
#+BEGIN_SRC text
3
10
7
#+END_SRC
** Analyzation

简单模拟，一个 N 个出口（节点）的环形高速路

输入初始数据 N D_1~D_i~D_N (D_i 表示第i个节点到第i+1个节点的距离)

然后输入 M 个出口点对

输出两个出口之间的最短距离

** Solutions
#+BEGIN_SRC c++
#include <stdio.h>
const int MaxN = 100000;
int main() {
  int dis[MaxN]={0}; //用来记录第一个节点到第i+1个节点的距离
  int n, dissum = 0;
  scanf("%d", &n);
  for(int i=1; i<=n; i++){
    int tmp;
    scanf("%d", &tmp);
    dissum += tmp;
    dis[i] = dissum;
  }
  int m;
  scanf("%d", &m);
  while(m--){
    int ln, rn;
    scanf("%d%d", &ln, &rn);
    if(ln>rn){ //注意到我的距离计算方法 必须 ln>rn
      int tmp = ln;
      ln = rn;
      rn = tmp;
    }
    int right, left; //顺时针和逆时针两个方向计算距离
    right = dis[rn-1]-dis[ln-1];
    left = dissum-right;
    printf("%d\n", right<left?right:left);
  }
  return 0;
}
#+END_SRC
