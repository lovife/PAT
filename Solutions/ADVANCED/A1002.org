* 1002 A+B for Polynomials (25)（25 分）
This time, you are supposed to find A+B where A and B are two polynomials.

** Input

Each input file contains one test case. Each case occupies 2 lines, and each line contains the information of a polynomial: K N1 a~N1~ N2 a~N2~ ... NK a~NK~, where K is the number of nonzero terms in the polynomial, Ni and a~Ni~ (i=1, 2, ..., K) are the exponents and coefficients, respectively. It is given that 1 <= K <= 10，0 <= NK < ... < N2 < N1 <=1000.

** Output

For each test case you should output the sum of A and B in one line, with the same format as the input. Notice that there must be NO extra space at the end of each line. Please be accurate to 1 decimal place.

** Sample Input:
#+BEGIN_SRC text
2 1 2.4 0 3.2
2 2 1.5 1 0.5
#+END_SRC
** Sample Output:
#+BEGIN_SRC text
3 2 1.5 1 2.9 0 3.2
#+END_SRC
** Analyzation

简单模拟，实现多项式相加

K 是项数 N1 是项的指数 a~N1 是前面的系数，输出 需要降幂排序

最初思路：每个多项式 1 个 int 数组存放指数 1 个 double 数组存放系数
*注意点：系数相加时，消去系数为 0 的项*

改进最初思路：用 int x[2*maxK] double a[2*maxK] 用作信息表（指数和系数一一对应），存放指数和系数，另 int p[2*maxK] 用来存放访问指针，第二多项式逐项合并或插入。

注意到指数最大为 1000 也可以用下标表示指数，极大地简化代码
*double[1001] 开销是 1001*8Byte = 8KB 远远小于 64M 的限制*

优化思路：double c[1001] 存放多项式系数 a_0 ~ a_i ~ a_1001 i也是数组下标，数组内存放系数，扫描数据进行对应指数项的系数相加，完毕，统计非 0 项,（可以用 2*K 个整型数的数组存放访问指针加快输出）, 输出。

** Solutions
#+BEGIN_SRC c++
#include <stdio.h>
#include <math.h>
const int MaxN = 1001;
const int MaxK = 10;
int main() {
  double c[MaxN] = {0};
  int n;
  scanf("%d", &n);
  for(int i=1; i<=n; i++){
    int p;
    double tmp;
    scanf("%d%lf", &p, &tmp);
    c[p] += tmp;
  }
  scanf("%d", &n);
  for(int i=1; i<=n; i++){
    int p;
    double tmp;
    scanf("%d%lf", &p, &tmp);
    c[p] += tmp;
  }
  int show[2*MaxK+1] = {0};  //show[0] 存放个数
  for(int i=1000; i>=0; i--) //降幂排列
    if(fabs(c[i])>1e-8){     //fabs(double)>1e-8 绝对值大于1e-8即视为非零
      show[0]++;
      show[show[0]] = i;
    }
  printf("%d", show[0]);
  for(int *p = show+1; p<=show+show[0]; p++) //show[0] = 0 无法输出符合题意
    printf(" %d %.1f", *p, c[*p]);
  return 0;
#+END_SRC

#+BEGIN_SRC c++
// 较复杂的实现
#include <stdio.h>
#include <math.h>
const int MaxK = 11;
int main() {
  int na[MaxK] = {0}, nb[MaxK] = {0}, nc[MaxK] = {0};
  double a[MaxK] = {0}, b[MaxK] = {0}, c[MaxK] = {0};
  scanf("%d", &na[0]);
  for(int i=1; i<=na[0]; i++)
    scanf("%d%lf", &na[i], &a[i]);
  scanf("%d", &nb[0]);
  for(int i=1; i<=nb[0]; i++)
    scanf("%d%lf", &nb[i], &b[i]);
  nc[0] = na[0] + nb[0];
  int pa = 1, pb = 1, pc = 1;
  while(pa<=na[0]&&pb<=nb[0]){
    if(na[pa]==nb[pb]){
      nc[0]--;
      nc[pc] = na[pa];
      c[pc] = a[pa++] + b[pb++];
      if(fabs(c[pc])<1e-8){
        nc[0]--;
        continue;
      }
      pc++;
    }
    else if(na[pa] > nb[pb]){
      nc[pc] = na[pa];
      c[pc++] = a[pa++];
    }
    else{
      nc[pc] = nb[pb];
      c[pc++] = b[pb++];
    }
  }
  if(pa!=na[0]+1){
    while(pa<=na[0]){
      nc[pc] = na[pa];
      c[pc++] = a[pa++];
    }
  }
  if(pb!=nb[0]+1){
    while(pb<=nb[0]){
      nc[pc] = nb[pb];
      c[pc++] = b[pb++];
    }
  }
  printf("%d", nc[0]);
  for(int i=1; i<=nc[0]; i++)
    printf(" %d %.1f", nc[i], c[i]);
  return 0;
}
#+END_SRC

#+BEGIN_SRC c++
//改进最初思路
#include <cstdio>
#include <cmath>
const int MaxK = 10;
int main() {
  int x[2*MaxK] = {0}, p[2*MaxK] = {0}, p_end = 0; // p_end 用来记录数据表尾
  double a[2*MaxK] = {0};
  int n;
  scanf("%d", &n);
  for(int i=0; i<n; i++){
    scanf("%d%lf", &x[i], &a[i]);
    p[p_end++] = i;
  }
  scanf("%d", &n);
  for(int k=1; k<=n; k++){
    int xt;
    double at;
    scanf("%d%lf", &xt, &at);
    if(xt<x[p[p_end-1]]){  //直接插入表尾
      x[p_end] = xt;
      a[p_end] = at;
      p[p_end] = p_end;    //记录指针
      p_end++;             //指针指向尾部
    }
    else{  //插入排序, 从大到小, 保证最后一项的指数最小
      for(int i=0; i<p_end; i++){ //由于上面的操作，xt 不可能是最小指数
        if(xt>x[p[i]]){ //找到插入位置
          int j = p_end;
          //后移
          while(j>i){
            p[j] = p[j-1];
            j--;
          }
          //存储数据
          x[p_end] = xt;
          a[p_end] = at;
          p[i] = p_end; //记录指针
          p_end++;      //指针指向尾部
          break;
        }
        else if(xt==x[p[i]]){
          a[p[i]] += at;
          break;
        }
      }
    }
  }
  //统计项数
  n = 0;
  for(int i=0; i<p_end; i++)
    if(fabs(a[p[i]])>1e-8)
      n++;
  printf("%d", n);
  //降幂输出
  for(int i=0; i<p_end; i++)
    if(fabs(a[p[i]])>1e-8)
      printf(" %d %.1f", x[p[i]], a[p[i]]);
  return 0;
}
#+END_SRC
