* 1004 Counting Leaves（30 分）
A family hierarchy is usually presented by a pedigree tree. Your job is to count those family members who have no child.

** Input Specification:
Each input file contains one test case. Each case starts with a line containing 0<N<100, the number of nodes in a tree, and M (<N), the number of non-leaf nodes. Then M lines follow, each in the format:
#+BEGIN_SRC text
ID K ID[1] ID[2] ... ID[K]
#+END_SRC
where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children. For the sake of simplicity, let us fix the root ID to be 01.

The input ends with N being 0. That case must NOT be processed.

** Output Specification:
For each test case, you are supposed to count those family members who have no child for every seniority level starting from the root. The numbers must be printed in a line, separated by a space, and there must be no extra space at the end of each line.

The sample case represents a tree with only 2 nodes, where 01 is the root and 02 is its only child. Hence on the root 01 level, there is 0 leaf node; and on the next level, there is 1 leaf node. Then we should output 0 1 in a line.
** Sample Input:
#+BEGIN_SRC text
2 1
01 1 02
#+END_SRC
** Sample Output:
#+BEGIN_SRC text
0 1
#+END_SRC
** Analyzation
输入一个族谱，找出每一代人没有孩子的个数

（树，输出每层叶子结点个数）

思路：二维数组存储树，广度遍历，输出每层叶子结点个数
- 需要把 ID 换算成 int
- 用 散列表存储数据
** Solutions
#+BEGIN_SRC c++
#include <cstdio>
const int maxn = 100;
int ped[100+1][100+1]={}; //ped[i][0]==1 表示这个人有子
void getid(int &a){
  char str[5];
  scanf("%s", str);
  a = 10*(str[0]-48)+(str[1]-48);
}
void findleaf(int que[], int &head, int &end){
  int count = 0;
  int p = end, n = head; //读该层的节点
  while(p%maxn!=n%maxn){
    if(ped[que[p%maxn]][0]){
      for(int i=1; i<=maxn; i++) if(ped[que[p%maxn]][i]) que[head++] = i;
    }
    else count++;
    p++; //读取下一个人
  }
  end = n; //上一层全部出队
  printf("%d", count);
}
int main() {
  int n, l;
  scanf("%d%d", &n, &l);
  for(int i=1; i<=l; i++){
    int node, k, child;
    getid(node);
    scanf("%d", &k);
    while(k--){
      ped[node][0]++; //记录一个孩子
      getid(child), ped[node][child] = 1;
    }
  }
  int que[100] = {}, head = 0, end = 0;
  // root 遍历输出
  que[head++] = 1;
  findleaf(que, head, end);
  while(head%maxn!=end%maxn){
    printf(" ");
    findleaf(que, head, end);
  }
  return 0;
}
#+END_SRC
