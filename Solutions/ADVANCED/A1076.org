* 1076 Forwards on Weibo（30 分）
Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only L levels of indirect followers are counted.

** Input Specification:
Each input file contains one test case. For each case, the first line contains 2 positive integers: N (≤1000), the number of users; and L (≤6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to N. Then N lines follow, each in the format:

M[i] user_list[i]
where M[i] (≤100) is the total number of people that user[i] follows; and user_list[i] is a list of the M[i] users that followed by user[i]. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.

Then finally a positive K is given, followed by K UserID's for query.

** Output Specification:
For each UserID, you are supposed to print in one line the maximum potential amount of forwards this user can triger, assuming that everyone who can view the initial post will forward it once, and that only L levels of indirect followers are counted.

** Sample Input:
#+BEGIN_SRC text
7 3
3 2 3 4
0
2 5 6
2 3 1
2 3 4
1 4
1 5
2 2 6
#+END_SRC
** Sample Output:
#+BEGIN_SRC text
4
5
#+END_SRC
** Analyzation

目的是计算一个微博用户的一条推送最多会被多少人（关注他，和关注关注他的人...最多考虑 L 层）转发。

自定义模型 （与图的区别，搜索路径不是最佳，无法精确控制层数）

思路：bef[1001][1001] 把输入数据转化为 Follow 用户 i 的用户列表，计算时，用 fwds[1001] 记录(1/0，fwd/not)，考虑 n 层之后，统计结果输出。

开销: 1000*1000*4Byte + 1000*4Byte = 4 MB + 4KB

解决：构建图，带层数的广度优先遍历

- 队列存每层的节点
- 散列数组 记录入队情况

*数组大小设定问题*

*源于没从题目中绕过来，题目的意思是每个最多关注 maxm = 100人，但是我的二维数组是存放关注的列表，大v有可能被大家都关注，那每行的最大应该是 maxn = 1000！*
** Solutions
#+BEGIN_SRC c++
// 自定义模型，答案错误 （27）
#include <stdio.h>
#include <string.h>
const int MaxN = 1001;
const int MaxM = 101;
void countfwd(int *bef, int fwds[], int l, int id, int pre_id){
  if(l){
    for(int i=1; i<=*(bef+id*MaxN); i++){
      if(!fwds[*(bef+id*MaxN+i)]){
        fwds[*(bef+id*MaxN+i)] = 1;
        fwds[0]++;
      }
      if(*(bef+id*MaxN+i) != pre_id){ // 解决互相关注
        countfwd(bef, fwds, l-1, *(bef+id*MaxN+i), id);
      }
    }
  }
}
int main() {
  int bef[MaxN][MaxN] = {0}, // bef[i][0] 存放关注他的人数
      fwds[MaxN] = {0};      // fwds[0] 存放统计结果
  int n, l;
  scanf("%d%d", &n, &l);
  for(int i=1; i<=n;i++){
    int m;
    scanf("%d", &m);
    for(int j=1; j<=m; j++){
      int ifolid;
      scanf("%d", &ifolid);
      bef[ifolid][(++bef[ifolid][0])] = i;
    }
  }
  int k;
  scanf("%d", &k);
  int countk[MaxM];
  for(int i=0; i<k; i++){
    memset(fwds, 0, sizeof(fwds)); //清空上一次统计结果
    int id;
    scanf("%d", &id);
    // 计算 fwd 次数 开始递归
    fwds[id] = 1;
    int *p = &bef[0][0];
    countfwd(p, fwds, l, id, 0);
    countk[i] = fwds[0];
  }
  for(int i=0; i<k; i++)
    printf("%d\n", countk[i]);
  return 0;
}
#+END_SRC

#+BEGIN_SRC c++
//改进 依然无法通过最后一个用例
#include <cstdio>
#include <cstring>
const int maxn = 1000;
const int maxm = 100;
const int maxq = maxm*maxn;
int follower[maxn+1][maxm+1] = {}, que[maxq] = {};
void countfwd(int has[], int &count, int &qh, int &qe, int &ht){ //计算该层的 fwd 数 并入队下一层节点
  int head = qh, end = qe;
  while(head%maxq!=end%maxq){
    int user = que[head++%maxq];
    if(!has[user]){
      count++;
      has[user] = 1;
      for(int j=1; j<=follower[user][0]; j++) que[qe++%maxq] = follower[user][j];
    }
  }
  qh = end;
}
int main() {
  int n, l, k;
  scanf("%d%d", &n, &l);
  for(int i=1; i<=n; i++){
    scanf("%d", &k);
    while(k--){
      int follow;
      scanf("%d", &follow);
      int &p = follower[follow][0];
      follower[follow][++p] = i;
    }
  }
  // 得到 follower[userid][0] 关注他的人数 follower[userid][i] 关注者id
  int kman[maxn], has[maxn+10];
  scanf("%d", &k);
  for(int i=0; i<k; i++) scanf("%d", &kman[i]);
  for(int i=0; i<k; i++){
    //初始化
    memset(has, 0, sizeof(has));
    int level = l, user = kman[i], count = 0;
    int qh = 0, qe = 0, ht = 0;
    has[user] = 1;
    for(int j=1; j<=follower[user][0]; j++) que[qe++] = follower[user][j];
    while(level--) countfwd(has, count, qh, qe, ht);
    printf("%d\n", count);
  }
  return 0;
}
#+END_SRC

#+BEGIN_SRC c++
// 满分通过
  #include <cstdio>
  #include <cstring>
  const int maxn = 1010;
  //const int maxm = 101;
  //int foller[maxn][maxm] = {}; //这里对题目给的 M 理解不恰当
  int foller[maxn][maxn] = {};
  int que[maxn] = {}, inq[maxn] = {};
  int bfs(int l){
      memset(inq, 0, sizeof(inq));
      inq[que[0]] = 1;
      int head = 0, end = 1, count = 0;
      while(head!=end&&l--){
          int lhead = head, lend = end;
          while(lhead!=lend){
              int node = que[lhead%maxn];
              lhead++;
              for(int i=1; i<=foller[node][0]; i++){
                  int child = foller[node][i];
                  if(inq[child]) continue;
                  else{
                      inq[child] = 1;
                      que[end%maxn] = child;
                      end++;
                      count++;
                  }
              }
          }
          head = lhead;
      }
      return count;
  }
  int main() {
      int n, l, k;
      scanf("%d %d", &n, &l);
      for(int id=1; id<=n; id++){
          scanf("%d", &k);
          while(k--){
              int fid;
              scanf("%d", &fid);
              int &p = foller[fid][0];
              foller[fid][++p] = id;
          }
      }
      int fuser;
      scanf("%d", &k);
      while(k--){
          scanf("%d", &que[0]);
          printf("%d\n", bfs(l));
      }
      return 0;
  }
#+END_SRC
