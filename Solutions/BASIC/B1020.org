* 1020 月饼（25 分）
月饼是中国人在中秋佳节时吃的一种传统食品，不同地区有许多不同风味的月饼。现给定所有种类月饼的库存量、总售价、以及市场的最大需求量，请你计算可以获得的最大收益是多少。

注意：销售时允许取出一部分库存。样例给出的情形是这样的：假如我们有 3 种月饼，其库存量分别为 18、15、10 万吨，总售价分别为 75、72、45 亿元。如果市场的最大需求量只有 20 万吨，那么我们最大收益策略应该是卖出全部 15 万吨第 2 种月饼、以及 5 万吨第 3 种月饼，获得 72 + 45/2 = 94.5（亿元）。

** 输入格式：
每个输入包含一个测试用例。每个测试用例先给出一个不超过 1000 的正整数 N 表示月饼的种类数、以及不超过 500（以万吨为单位）的正整数 D 表示市场最大需求量。随后一行给出 N 个正数表示每种月饼的库存量（以万吨为单位）；最后一行给出 N 个正数表示每种月饼的总售价（以亿元为单位）。数字间以空格分隔。

** 输出格式：
对每组测试用例，在一行中输出最大收益，以亿元为单位并精确到小数点后 2 位。

** Sample Input:
#+BEGIN_SRC text
3 20
18 15 10
75 72 45
#+END_SRC
** Sample Output:
#+BEGIN_SRC text
94.50
#+END_SRC
** Analyzation
题目给出了，最大收益策略，说明用贪心算法。

即优先卖完库存内单价最贵的月饼。

思路：
- 结构体 存储库存和价格
- 针对价格从大到小排列
- 从价格最高的开始卖
** Solutions
#+BEGIN_SRC c++
  #include <cstdio>
  #include <algorithm>
  using namespace std;
  const int MaxN = 1000;
  struct mooncake{
      double stock;
      double allsell;
      double price;
  }cake[MaxN+10];
  bool cmp(mooncake a, mooncake b) {
      return a.price-b.price>1e-8; //之前没有用 price 存放单价，而是 a.allsell/a.stock - b.allsell/b.stock > 1e-8; 一直报错
      //return a.allsell/a.stock - b.allsell/b.stock > 1e-8; //是 PAT 测试问题，还是 compate 函数运算过于复杂？
  }
  int main() {
      int n;
      double marketneeds;
      scanf("%d%lf", &n, &marketneeds);
      for(int i=0; i<n; i++) scanf("%lf", &cake[i].stock);
      for(int i=0; i<n; i++){
          scanf("%lf", &cake[i].allsell);
          cake[i].price = cake[i].allsell/cake[i].stock;
      }
      sort(cake, cake+n, cmp);
      // 贪心卖法 = =
      double profit = 0;
      mooncake *type = cake;//从最贵的卖
      while(marketneeds>1e-8&&type<cake+n){
          if(marketneeds >= type->stock){
              profit += type->allsell;
              marketneeds -= type->stock;
              type++;
          }
          else{
              profit += marketneeds * type->price;
              //profit += marketneeds * type->allsell/type->stock;
              marketneeds = 0;
          }
      }
      printf("%.2f\n", profit);
      return 0;
  }
#+END_SRC
