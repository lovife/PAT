* 算法初步 排序算法-冒泡排序

**  Quick view
#+BEGIN_QUOTE
Wikipedia: [[https://zh.wikipedia.org/wiki/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F][冒泡排序]]（Bubble Sort）是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。
#+END_QUOTE
冒泡排序在平均和最坏情况下的时间复杂度都是 O(n^2)，最好情况下是 O(n)，空间复杂度是 O(1)。

** More infor
排序指将一个无序序列按某个规则进行有序排列。

冒泡排序是排序算法中最基础的一种。

冒泡排序的本质在于 *交换* ，将最大的数不断交换右移到最右端，固定这个数，然后考虑余下的序列，循环往复，直到，余下序列剩一个数。（因为此时，用来放大数的端已经全部占满，并且已经达到有序，从小到达）

改进前，任何输入的算法复杂度都是 O(n^2)，空间复杂度是常数 O(1)。

#+BEGIN_SRC c++
  #include <cstdio>
  int main() {
      int a[10] = {3, 1, 4, 5, 2}; //5 个数
      //控制趟数，n 个数，共需要 n-1 趟
      for(int i=1; i<=5-1; i++){
          //实际访问数组，注意访问右界不要超过 下标 5-1 （也就是数组的右界）
          for(int j=0; j<5-i; j++){
              if(a[j]>a[j+1]){ //权值比较 左边大即进行 *交换*
                  int tmp = a[j];
                  a[j] = a[j+1];
                  a[j+1] = tmp;
              }
          }
      }
      for(int i=0; i<5; i++)
          printf("%d ", a[i]);
      return 0;
  }
  ---------console--------------
  1 2 3 4 5
#+END_SRC

#+BEGIN_SRC c++
  void bubble_sort(vector<int> v){
      for(int i=1; i<=v.size()-1; i++){
          for(int j=0; j<v.size()-i; j++){
              if(v[j] > v[j+1]) swap(v[j], v[j+1]);
          }
      }
  }
#+END_SRC

可以记录一个不需要交换的位置，把最好情况的时间复杂度降到 O(n)

#+BEGIN_SRC c++
  void bubble_sort(vector<int> v){
      int end = v.size();
      while(end > 1){
          int new_end = 0;
          for(int j=0; j<end-1; j++){
              if(v[j] > v[j+1]){
                  swap(v[j], v[j+1]);
                  new_end = j+1;
              }
          }
          end = new_end;
      }
  }
  // new_end 起到的作用就像是会回弹的隔板，试着去读懂代码，想象
#+END_SRC

#+BEGIN_QUOTE
上述代码中维护了一个已排好序的序列：[end,N)（N是数组大小），每次冒泡会记录最大的那个泡泡的位置作为end。 直到end == 1时，说明整个序列已经排好。

因为冒泡排序中每次冒泡都相当于选最大值放到序列结尾，所以[end,N)不仅是有序的，而且位置是正确的。 所以end == 1时，[1,N)已经获得了正确的位置，那么元素0的位置自然就确定了（它已经没得选了）。
#+END_QUOTE
** 参考

- [[https://harttle.land/2015/09/28/insertion-bubble-sort.html][冒泡排序和插入排序]]
