* 算法初步 排序算法-插入排序

** Quick view
#+BEGIN_QUOTE
Wikipedia: [[https://zh.wikipedia.org/wiki/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F][插入排序]]（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。
#+END_QUOTE
插入排序在平均和最坏情况下的时间复杂度是 O(n^2)，最好情况下是 O(n)，空间复杂度是 O(1)。

** More infor

插入排序也是最简单的一类排序算法。

#+BEGIN_SRC test
如 A[1~6] = {5, 2, 4, 6, 3, 1}

i=1
已有序 {5} 待插入 {2, 4, 6, 3, 1}
     |
 | 5 | 2 | 4 | 6 | 3 | 1 |
     |

     5
 |   | 5  | 4 | 6 | 3 | 1 |
     | 2
   ^---^

         |
 | 2 | 5 | 4 | 6 | 3 | 1 |
         |

i=2
已有序 {2, 5} 待插入 {4, 6, 3, 2, 1}
         5
 | 2 |   | 5 | 6 | 3 | 1 |
         | 4
       ^---^

             |
 | 2 | 4 | 5 | 6 | 3 | 1 |
             |

          ... ...

i=5
已有序 {2, 3, 4, 5, 6} 待插入 {1}
     2   3   4   5   6
 |   | 2 | 3 | 4 | 5 | 6|
                     | 1
   ^-------------------^

                         |
 | 1 | 2 | 3 | 4 | 5 | 6 |
                         |
已有序 {1, 2, 3, 4, 5, 6}
#+END_SRC

这样对该排序就有直观的感受了。

思路：取出后面待插入的第一个数，从后往前枚举有序列来确定插入位置，每枚举一个后移一位

#+BEGIN_SRC c++
  void insert_sort(int arr[], int len){
      for(int i = 1; i<len; i++){
          int tmp = arr[i], j = i - 1; //tmp 临时存放 a[i], j 从 i 前一项开始枚举
          while(j>=0 && arr[j] > tmp){ //从后往前枚举
              arr[j+1] = arr[j];         //后移 保证后面的数比前面的大
              j--;
          }
          arr[j+1] = tmp;              //找到位置插入
      }
  }
#+END_SRC
